UserWarrior

所有direction都为"up", "down", "left", "right"之一

01. #attack(direction)
   对direction方向发起近身攻击

02. #dart(direction)
    对direction方向投掷手里剑(射程为3格), 会被途中的物品和生物阻挡,
    并摧毁除墙/门/锁以外的所有单位

03. #interact(direction)
    对direction方向的方格作出拾取动作, 捡起该格中物品或操作可互动物品(如锁)

04. #walk(direction)
    向direction方向前进一格, 若改格上有其他单位, 则会阻止warrior前进
    #left(), #right(), #up(), #down()为刚方法的快捷移动方法.

05. #feel(direction)
    感应direction方向邻近一格的状况, 返回目标格的实例对象

06. #look(direction)
    检查direction方向邻近三格的状况, 返回包含此三格实例对象的数组

07. #rest()
    休息一回合，并恢复少量的HP

09. #listen()
   通过声音洞察全图单位所处的位置, 返回这些单位所在格子的数组

10. #direction_of(space)
    判断传入的space在哪个方向, 返回对应方向的字符串

11. #distance_of(space)
    判断传入的space距离warrior有多少步的直线距离

12. #direction_of_door()
    洞察门所在的方向, 返回对应方向的字符串

UserSpace

1 space.can_walk()
   判断格子是否可以行走
2 space.has('enemy')
   判断格子是否有怪
3 space.has('slime')
   判断格子是否有史莱姆
4 space.has('tauren')
   判断格子是否有牛头
5 space.has('creeper')
   判断格子是否有 creeper
6 space.has('archer')
   判断格子是否有弓箭手
7 space.has('wizard')
   判断格子是否有魔法师
8 space.has('door')
   判断格子是否有门
9 space.has('key')
   判断格子是否有钥匙
10 space.has('lock')
   判断格子是否有锁
11 space.has('diamond')
   判断格子是否有宝石
12 space.has('wall')
   判断格子是否有墙
13 space.has('shuriken')
   判断格子是否有手里剑
14 space.is_empty()
   判断格子是否为空
